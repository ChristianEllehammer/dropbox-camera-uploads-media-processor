#!/bin/bash

# Enable case-insensitive matching
shopt -s nocasematch

# Logging configuration
LOG_DIR="/Users/christian/Dropbox/Dokumenter/Computer/Scripts and Apps/Automator/Folder Actions/Dropbox - Camera Uploads/logs"
LOG_FILE="$LOG_DIR/organizer_log_$(date +%Y%m%d).txt"
MAX_LOG_DAYS=30  # Keep logs for 30 days
LOG_LEVEL="INFO"  # Can be DEBUG, INFO, WARNING, ERROR

# Create logs directory if it doesn't exist
mkdir -p "$LOG_DIR"

# Function to log messages with timestamp and log level
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Convert log level to numeric value for comparison
    local level_num=0
    case $LOG_LEVEL in
        "DEBUG") level_num=0 ;;
        "INFO") level_num=1 ;;
        "WARNING") level_num=2 ;;
        "ERROR") level_num=3 ;;
    esac
    
    local msg_level_num=0
    case $level in
        "DEBUG") msg_level_num=0 ;;
        "INFO") msg_level_num=1 ;;
        "WARNING") msg_level_num=2 ;;
        "ERROR") msg_level_num=3 ;;
    esac
    
    # Only log if message level is >= configured log level
    if [ $msg_level_num -ge $level_num ]; then
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    fi
}

# Function to rotate old logs
rotate_logs() {
    find "$LOG_DIR" -name "organizer_log_*.txt" -type f -mtime +$MAX_LOG_DAYS -delete
}

# Initialize error tracking
declare -i error_count=0
declare -i warning_count=0
declare -i processed_count=0
declare -i skipped_count=0

# Rotate old logs
rotate_logs

# Log script start
log "INFO" "=== Script started ==="
log "INFO" "Processing files: $@"

# Base directory for organized files
BASE_DIR="/Users/christian/Dropbox/Billeder/Personlig/Ã…r"

for f in "$@"; do
    # Check if file exists
    if [ ! -f "$f" ]; then
        log "ERROR" "File not found: $f"
        ((error_count++))
        ((skipped_count++))
        continue
    fi

    # Get file extension
    extension="${f##*.}"
    extension_lower=$(echo "$extension" | tr '[:upper:]' '[:lower:]')

    # Get file date from filename (format: YYYY-MM-DD HH.MM.SS)
    filename=$(basename "$f")
    date_part=$(echo "$filename" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}')
    
    if [ -z "$date_part" ]; then
        log "ERROR" "Could not extract date from filename: $filename"
        ((error_count++))
        ((skipped_count++))
        continue
    fi

    # Extract year and month
    year=$(echo "$date_part" | cut -d'-' -f1)
    month=$(echo "$date_part" | cut -d'-' -f2)

    # Create target directory based on file type
    if [[ "$extension_lower" =~ ^(jpg|jpeg|png|gif|heic)$ ]]; then
        target_dir="$BASE_DIR/$year/$year-$month/$year-$month - Blandet/Billeder"
    elif [[ "$extension_lower" =~ ^(mov|mp4|m4v|avi|mkv|webm)$ ]]; then
        target_dir="$BASE_DIR/$year/$year-$month/$year-$month - Blandet/Videoer"
    else
        log "WARNING" "Skipping unsupported file type: $f"
        ((warning_count++))
        ((skipped_count++))
        continue
    fi

    # Create target directory if it doesn't exist
    mkdir -p "$target_dir"

    # Move file to target directory
    if mv "$f" "$target_dir/"; then
        log "INFO" "Moved $f to $target_dir/"
        ((processed_count++))
    else
        log "ERROR" "Failed to move $f to $target_dir/"
        ((error_count++))
    fi
done

# Log summary
log "INFO" "=== Processing Summary ==="
log "INFO" "Total files processed: $processed_count"
log "INFO" "Files skipped: $skipped_count"
log "INFO" "Warnings: $warning_count"
log "INFO" "Errors: $error_count"
log "INFO" "=== Script finished ==="